
import java.io.File;
import java.io.IOException;
import java.util.Scanner;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author 242353497
 */
public class MainProgram extends javax.swing.JFrame {
    int easyCount = 0;
    int midCount = 0;
    int hardCount = 0;
    /**
     * Creates new form NewJFrame
     */
    public MainProgram() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fake = new javax.swing.JButton();
        real = new javax.swing.JButton();
        header = new javax.swing.JTextField();
        nextEasy = new javax.swing.JButton();
        nextMid = new javax.swing.JButton();
        nextHard = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fake.setBackground(new java.awt.Color(255, 0, 51));
        fake.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        fake.setText("Fake");
        fake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fakeActionPerformed(evt);
            }
        });

        real.setBackground(new java.awt.Color(0, 255, 51));
        real.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        real.setText("Real");
        real.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realActionPerformed(evt);
            }
        });

        header.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerActionPerformed(evt);
            }
        });

        nextEasy.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        nextEasy.setText("Next Easy");
        nextEasy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextEasyActionPerformed(evt);
            }
        });

        nextMid.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        nextMid.setText("Next Mid");
        nextMid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextMidActionPerformed(evt);
            }
        });

        nextHard.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        nextHard.setText("Next Hard");
        nextHard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextHardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(fake)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(real)
                .addGap(103, 103, 103))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(nextEasy)
                .addGap(59, 59, 59)
                .addComponent(nextMid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextHard)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(real)
                    .addComponent(fake))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextEasy, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextMid, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextHard, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fakeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fakeActionPerformed

    private void headerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_headerActionPerformed

    private void realActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_realActionPerformed

    private void nextEasyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextEasyActionPerformed
        // Declare variables
        int lines = countLines();
        String [] easyQ = easyQuestions(lines);
        header.setText(easyQ[easyCount]);
        if (easyCount < easyQ.length - 1){
            easyCount++; //Cycle through questions
        } else {
            header.setText("No more easy!"); // When Finished
        }
        
    }//GEN-LAST:event_nextEasyActionPerformed

    private void nextMidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextMidActionPerformed
        // Declare variables
        int lines = countLines();
        String [] midQ = midQuestions(lines);
        header.setText(midQ[midCount]);
        if (midCount < midQ.length - 1){
            midCount++; //Cycle through questions
        } else {
            header.setText("No more easy!"); // When Finished
        }
    }//GEN-LAST:event_nextMidActionPerformed

    private void nextHardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextHardActionPerformed
        // Declare variables
        int lines = countLines();
        String [] hardQ = hardQuestions(lines);
        header.setText(hardQ[hardCount]);
        if (midCount < hardQ.length - 1){
            midCount++; //Cycle through questions
        } else {
            header.setText("No more easy!"); // When Finished
        }
    }//GEN-LAST:event_nextHardActionPerformed

    /**
     * Counts line in file
     * @return lineCount
     */
    private int countLines(){
        // Declare Variables
        int lineCount = 0;
        // Try catch
        try {
            // Loop through data.txt if there is a next line
            Scanner fileInput = new Scanner(new File("data.txt"));
            while (fileInput.hasNextLine()){
                fileInput.nextLine();
                lineCount++; // Add one to counter 
            }
            fileInput.close(); // Close scanner
            
        } catch(IOException e){
            System.out.print("Java Exception" + e);
        }
        return lineCount; // Return lineCount
    }
    /**
     * Take questions from file
     * @param lineCount This creates the array size
     * @return questions This holds the questions in an array
     */
    private String [] easyQuestions(int lineCount){
        // Declare Variables
        int count = 0;
        String [] easyQuestions = new String [lineCount];
        // Try catch
         try{
             // Loop through data.txt and store questions
            Scanner fileInput = new Scanner(new File("Easy.txt"));
            while(fileInput.hasNext()){
                String output = fileInput.nextLine();
                // Store values
                easyQuestions[count] = output;
                count++; // Add to counter
            }
        } catch (IOException e){
            System.err.println("Java Exception: " + e);
        } catch (StringIndexOutOfBoundsException p) {
            System.err.println("Java Exception: " + p);
        }

        return easyQuestions; // Return array
    }
     /**
     * Take questions from file
     * @param lineCount This creates the array size
     * @return questions This holds the questions in an array
     */
    private String [] midQuestions(int lineCount){
        // Declare Variables
        int count = 0;
        String [] midQuestions = new String [lineCount];
        // Try catch
         try{
             // Loop through data.txt and store questions
            Scanner fileInput = new Scanner(new File("Easy.txt"));
            while(fileInput.hasNext()){
                String output = fileInput.nextLine();
                // Store values
                midQuestions[count] = output;
                count++; // Add to counter
            }
        } catch (IOException e){
            System.err.println("Java Exception: " + e);
        } catch (StringIndexOutOfBoundsException p) {
            System.err.println("Java Exception: " + p);
        }

        return midQuestions; // Return array
    }
    /**
     * Take questions from file
     * @param lineCount This creates the array size
     * @return questions This holds the questions in an array
     */
    private String [] hardQuestions(int lineCount){
        // Declare Variables
        int count = 0;
        String [] hardQuestions = new String [lineCount];
        // Try catch
         try{
             // Loop through data.txt and store questions
            Scanner fileInput = new Scanner(new File("Easy.txt"));
            while(fileInput.hasNext()){
                String output = fileInput.nextLine();
                // Store values
                hardQuestions[count] = output;
                count++; // Add to counter
            }
        } catch (IOException e){
            System.err.println("Java Exception: " + e);
        } catch (StringIndexOutOfBoundsException p) {
            System.err.println("Java Exception: " + p);
        }

        return hardQuestions; // Return array
    }
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainProgram().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fake;
    private javax.swing.JTextField header;
    private javax.swing.JButton nextEasy;
    private javax.swing.JButton nextHard;
    private javax.swing.JButton nextMid;
    private javax.swing.JButton real;
    // End of variables declaration//GEN-END:variables
}
